win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 1 + 2 * x^2 + 3 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 0.5)
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
GridMax <- 8
# Define the study area (window)
win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 1 + 2.5 * x^2 + 3.5 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 2.5 * x^2 + 3.5 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 2.5 * x^3 + 3.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 0.5 * x^3 + 1.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
hist(Density, col = 'blue', main = 'Sample of Tree Density')
hist(Neighbors, col = 'red', main = 'Sample of Tree Density')
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
Density <- rep(NA, length(SampleX))
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(Density, col = 'blue', main = 'Sample of Tree Density')
hist(Neighbors, col = 'red', main = 'Sample of Tree Density')
hist(Density, col = 'blue', main = 'Sample of Tree Density')
mean(Density)
mean(Neighbors)
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
# Define properties of class size distribution
AveClassSize <- 19
SkewClassSize <- 1.08
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(1450, alpha, 1/theta))
summary(ClassSize)
hist(ClassSize)
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
# Now let's look at the distribution of classmates
summary(Classmates)
hist(Classmates)
# Define properties of class size distribution
AveClassSize <- 50
SkewClassSize <- 3
Students <- 45000
Seats <- Students*5
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(Seats/AveClassSize, alpha, 1/theta))
ClassSize <- ClassSize[ClassSize > 0]
summary(ClassSize)
hist(ClassSize)
quantile(ClassSize, 0.99)
# This university has some mega classes (the largest has 854 students). The
# average class size is a respectable 53. And it can claim that 99% of classes
# have fewer than 353 students. Now let's figure out how many classmates each
# student has.
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
summary(Classmates)
set.seed(1) # This here just ensures the random samples are the same.
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
# Define properties of class size distribution
AveClassSize <- 19
SkewClassSize <- 1.08
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(1450, alpha, 1/theta))
summary(ClassSize)
hist(ClassSize)
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
# Now let's look at the distribution of classmates
summary(Classmates)
hist(Classmates)
# Define properties of class size distribution
AveClassSize <- 50
SkewClassSize <- 3
Students <- 45000
Seats <- Students*5
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(Seats/AveClassSize, alpha, 1/theta))
ClassSize <- ClassSize[ClassSize > 0]
summary(ClassSize)
hist(ClassSize)
# This university has some mega classes (the largest has 854 students). The
# average class size is a respectable 53. And it can claim that 99% of classes
# have fewer than 353 students. Now let's figure out how many classmates each
# student has.
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
summary(Classmates)
hist(Classmates)
# Here is a visual exmple of this phenomenon.
if (!"ggplot2" %in% installed.packages()){
install.package('ggplot2')
}
library(ggplot2)
# Example data
# Let's create a sample matrix
ClassEx <- c(2,45,2,4,4,7,5,28,3)
ClassEx <- ClassEx[order(ClassEx)]
# Convert matrix to dataframe
data_df <- as.data.frame(as.table(matrix(ClassEx, nrow = 3)))
heatmap_plot <- ggplot(data_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") + # Create heatmap
scale_fill_gradient(low = "white", high = "steelblue") + # Set color gradient
theme_minimal() + # Set theme
labs(x = "", y = "", title = "Classes") + # Labels
geom_text(aes(label = Freq), color = "black", size = 10)
print(heatmap_plot)
# Create student sampling view
MatesEx <- c()
for (i in 1:length(ClassEx)){
MatesEx <- c(MatesEx, rep(ClassEx[i], ClassEx[i]))
}
# Reorder from smallest to largest
MatesEx <- MatesEx[order(MatesEx)]
# Convert to data frame for plotting
data_df <- as.data.frame(as.table(matrix(MatesEx,nrow = 10)))
# Make plot
heatmap_plot <- ggplot(data_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") + # Create heatmap
scale_fill_gradient(low = "white", high = "steelblue") + # Set color gradient
theme_minimal() + # Set theme
labs(x = "", y = "", title = "Classmates") + # Labels
geom_text(aes(label = Freq), color = "black", size = 10)
print(heatmap_plot)
if (!"spatstat" %in% installed.packages()){
install.package('spatstat')
}
library(spatstat)
GridMax <- 8
# Define the study area (window)
win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 0.5 * x^3 + 1.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
Density <- rep(NA, length(SampleX))
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(Density, col = 'blue', main = 'Sample of Tree Density')
lskjhf alskdjhas lkd jfhas ;lf jasd ;lfkjasd; f
rm(list = ls())
Density
Density <- 5
MyFavNum <- 1:100
MyFavNum
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
source("~/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Week 1 - Introduction to Statistics/SamplingExample.R", echo=TRUE)
df.w <- read.table(file = 'worms.txt', header = T)
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Lab/Wk2")
df.w <- read.table(file = 'worms.txt', header = T)
df.w
?tapply
tapply(df.w$Worm.density, df.w$Vegetation, mean)
meadows <- df.w[df.w$Vegetation == 'Meadow', ]
meadows
meadows$Damp
frac.damp <- sum(meadows$Damp)/length(meadows$Damp)
frac.damp
unique(meadows$Vegetation)
unique(df.w$Vegetation)
unique(df.w$Damp)
unique(meadows$Damp)
unique(meadows$Damp) == T
unique(df.w$Damp) == TRUE
unique(df.w$Field.Name) == TRUE
unique(df.w$Field.Name)
unique(c(2,2,2,2,2,3))
rm(list = ls())
df.w
meadows
rm(list = ls())
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Lab/Wk2")
df.w <- read.table(file = 'worms.txt', header = T)
df.w
df.w[,3]
df.w$Slope
t.test <- lm(Worm.density ~ Vegetation, data = df.w)
t.test
t.test$residuals
t.test$coefficients
t.test$fitted.values
df.w$Vegetation == 'Grassland'
df.w
grasslands <- df.w[df.w$Vegetation == 'Grassland',]
grasslands
grasslands$Worm.density
subset(df.w, subset = df.w$Vegetation == 'Grassland', select = 'Worm.density')
sum(df.w$Vegetation == 'Grassland')
df.w$Damp
!df.w$Damp
df.w$Vegetation == 'Grassland'
df.w$Vegetation == 'Meadow'
NonDampMeadows <- df.w[df.w$Vegetation == 'Meadow' & !df.w$Damp,]
NonDampMeadows
rm(list = ls())
setwd('/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/.shortcut-targets-by-id/1pChKwu6ONXS5a12mjmSTYEPyL5pbN6eM/R_COURSE_2024/W07')
metab.df <- read.csv(file = 'data/Body_Size_Observations.csv')
unique(metab.df$class)
metab.df$class <- factor(metab.df$class,
levels = c('Reptilia', 'Mammalia', 'Aves'))
# Let's look just at birds, mammals, and reptiles
metab.subset.df <- subset(metab.df,
subset = class == "Aves" | class == "Mammalia" | class == "Reptilia")
# And we will keep track of their names for use in plotting
class.names <- unique(metab.subset.df$class)
# Let's add a colormap, the viridis colormap, to distinguish the different
# classes of organisms. For now, we have three. I like to get colors in the
# middle of the color spectrum. To do that, I get a few more colors than needed
# (here, seven) and then grab three that are in the middle.
library(viridisLite)
cols <-  viridis(7, alpha = 0.75)
cols <- cols[c(2,4,6)]
# Let's make an empty plot and fill in the title, labels, font sizes, and
# figure bounds. The code 'n' tells R to plot "nothing".
plot(0,0, 'n',
xlim = log(c(min(metab.subset.df$body.mass), max(metab.subset.df$body.mass))),
ylim = log(c(min(metab.subset.df$metabolic.rate), max(metab.subset.df$metabolic.rate))),
xlab = 'Body Mass (log scale)', ylab = 'Metabolic Rate (log scale)',
main = 'Metabolic scaling of different vertebrates',
cex.axis = 1.2,
cex.main = 1.3,
cex.lab = 1.5)
# We can also add gridlines to the plots
abline(v = 0, lwd = 1, lty = 2)
abline(h = seq(from = -9, to = 9, by = 1), lty = 3, col = 'gray')
abline(v = seq(from = -9, to = 9, by = 1), lty = 3, col = 'gray')
# Now we want to add each set of points. We will add these points by class
# according to the object "class.names" and plot their relationship between
# body mass and metabolic rate. We will use the colors picked up above.
for (i in 1:length(class.names)){
class.data <- subset(metab.subset.df, subset = class == class.names[i])
points(log(class.data$body.mass), log(class.data$metabolic.rate),
col = cols[i],
pch = 19)
}
# And we will add a legend
legend('topleft', legend = class.names, col = cols, pch = 19)
# Now let's fit a model with interactions between body mass and class.
pwr.law.mdl <- lm(log(metabolic.rate) ~ log(body.mass)*class,
data = metab.subset.df)
summary(pwr.law.mdl)
# Here, we will do this by first making a sequence of body sizes that spans the
# normal range of body sizes seen in each class.
body.mass <- c()
for (i in 1:length(class.names)){
class.df <- subset(metab.subset.df, subset = class == class.names[i])
body.mass = c(body.mass, seq(from = min(class.df$body.mass),
to = max(class.df$body.mass), length = 100))
}
# Here, we attch the body.mass ofbject with a new "class" object in a data frame
new.data <- data.frame(
body.mass,
class = factor(rep(class.names, each = 100)))
# Now we can predict metabolic rate for this new data, specifying that we want a
# "confidence interval", which gives the confidence interval for the mean
# metabolic rate.
ci.int <- predict(pwr.law.mdl, newdata = new.data, interval = 'confidence')
# Now we can just plot each on our original plots.
for (i in 1:length(class.names)){
class.indx <- new.data$class == class.names[i]
lines(log(new.data$body.mass[class.indx]), ci.int[class.indx,'fit'],
col = cols[i])
lines(log(new.data$body.mass[class.indx]), ci.int[class.indx,'lwr'],
col = cols[i], lty = 2)
lines(log(new.data$body.mass[class.indx]), ci.int[class.indx,'upr'],
col = cols[i], lty = 2)
}
# First, let's make our plot again.
plot(0,0, 'n',
xlim = log(c(min(metab.subset.df$body.mass), max(metab.subset.df$body.mass))),
ylim = log(c(min(metab.subset.df$metabolic.rate), max(metab.subset.df$metabolic.rate))),
xlab = 'Body Mass (log scale)', ylab = 'Metabolic Rate (log scale)',
main = 'Metabolic scaling of different vertebrates', cex.lab = 1.3)
subset(df.w, subset = df.w$Vegetation == 'Meadow', select = 'Damp')
rm(list = ls())
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Lab/Wk2")
df.w <- read.table(file = 'worms.txt', header = T)
df.w
tapply(df.w$Worm.density, df.w$Vegetation, mean)
meadows <- df.w[df.w$Vegetation == 'Meadow', ]
NonDampMeadows <- df.w[df.w$Vegetation == 'Meadow' & !df.w$Damp,]
subset(df.w, subset = df.w$Vegetation == 'Meadow', select = 'Damp')
sum(!subset(df.w, subset = df.w$Vegetation == 'Meadow', select = 'Damp'))
!(c(2,1,3,4,5) <= 3)
(c(2,1,3,4,5) <= 3)
sqrt(3*4)
rm(list = ls())
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Lab/Wk2")
df.w <- read.table(file = 'worms.txt', header = T)
df.w
tapply(df.w$Worm.density, df.w$Vegetation, mean)
meadows <- df.w[df.w$Vegetation == 'Meadow', ]
NonDampMeadows <- df.w[df.w$Vegetation == 'Meadow' & !df.w$Damp,]
sum(!subset(df.w, subset = df.w$Vegetation == 'Meadow', select = 'Damp'))
#bgsr bg bgt. t bgt sgt b
rm(list = ls())
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Lab/Wk2")
rm(list = ls())
setwd('/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/.shortcut-targets-by-id/1pChKwu6ONXS5a12mjmSTYEPyL5pbN6eM/R_COURSE_2024/W07')
metab.df <- read.csv(file = 'data/Body_Size_Observations.csv')
unique(metab.df$class)
metab.df$class <- factor(metab.df$class,
levels = c('Reptilia', 'Mammalia', 'Aves'))
# Let's look just at birds, mammals, and reptiles
metab.subset.df <- subset(metab.df,
subset = class == "Aves" | class == "Mammalia" | class == "Reptilia")
# And we will keep track of their names for use in plotting
class.names <- unique(metab.subset.df$class)
# Let's add a colormap, the viridis colormap, to distinguish the different
# classes of organisms. For now, we have three. I like to get colors in the
# middle of the color spectrum. To do that, I get a few more colors than needed
# (here, seven) and then grab three that are in the middle.
library(viridisLite)
cols <-  viridis(7, alpha = 0.75)
cols <- cols[c(2,4,6)]
# Let's make an empty plot and fill in the title, labels, font sizes, and
# figure bounds. The code 'n' tells R to plot "nothing".
plot(0,0, 'n',
xlim = log(c(min(metab.subset.df$body.mass), max(metab.subset.df$body.mass))),
ylim = log(c(min(metab.subset.df$metabolic.rate), max(metab.subset.df$metabolic.rate))),
xlab = 'Body Mass (log scale)', ylab = 'Metabolic Rate (log scale)',
main = 'Metabolic scaling of different vertebrates',
cex.axis = 1.2,
cex.main = 1.3,
cex.lab = 1.5)
# We can also add gridlines to the plots
abline(v = 0, lwd = 1, lty = 2)
abline(h = seq(from = -9, to = 9, by = 1), lty = 3, col = 'gray')
abline(v = seq(from = -9, to = 9, by = 1), lty = 3, col = 'gray')
# Now we want to add each set of points. We will add these points by class
# according to the object "class.names" and plot their relationship between
# body mass and metabolic rate. We will use the colors picked up above.
for (i in 1:length(class.names)){
class.data <- subset(metab.subset.df, subset = class == class.names[i])
points(log(class.data$body.mass), log(class.data$metabolic.rate),
col = cols[i],
pch = 19)
}
# And we will add a legend
legend('topleft', legend = class.names, col = cols, pch = 19)
# Now let's fit a model with interactions between body mass and class.
pwr.law.mdl <- lm(log(metabolic.rate) ~ log(body.mass)*class,
data = metab.subset.df)
summary(pwr.law.mdl)
# Here, we will do this by first making a sequence of body sizes that spans the
# normal range of body sizes seen in each class.
body.mass <- c()
for (i in 1:length(class.names)){
class.df <- subset(metab.subset.df, subset = class == class.names[i])
body.mass = c(body.mass, seq(from = min(class.df$body.mass),
to = max(class.df$body.mass), length = 100))
}
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/24-25/2025 - Spring/BIO 380/Lab/Cheatsheets")
