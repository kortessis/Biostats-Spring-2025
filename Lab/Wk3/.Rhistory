SampleY <- runif(100)*6
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 0.5)
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
point_pattern$x,point_pattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 1) + 1
SampleY <- runif(100)*(GridMax - 1) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 0.5)
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
point_pattern$x,point_pattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 0.5)
Density <- rep(NA, length(SampleX))
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(density)
density
distance
distance<1
sum(distance<1)
Density <- rep(NA, length(SampleX))
Density
i=1
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
distance
Density[i] = sum(distance < 1)
Density
hist(Density)
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(Density)
hist(Neighbors)
hist(Density)
mean(Density)
mean(Neighbors)
GridMax <- 8
# Define the study area (window)
win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 1 + 2 * x^2 + 3 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 0.5)
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
GridMax <- 8
# Define the study area (window)
win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 1 + 2.5 * x^2 + 3.5 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 2.5 * x^2 + 3.5 * y^2 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 2.5 * x^3 + 3.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 0.5 * x^3 + 1.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
hist(Density, col = 'blue', main = 'Sample of Tree Density')
hist(Neighbors, col = 'red', main = 'Sample of Tree Density')
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
Density <- rep(NA, length(SampleX))
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(Density, col = 'blue', main = 'Sample of Tree Density')
hist(Neighbors, col = 'red', main = 'Sample of Tree Density')
hist(Density, col = 'blue', main = 'Sample of Tree Density')
mean(Density)
mean(Neighbors)
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
# Define properties of class size distribution
AveClassSize <- 19
SkewClassSize <- 1.08
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(1450, alpha, 1/theta))
summary(ClassSize)
hist(ClassSize)
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
# Now let's look at the distribution of classmates
summary(Classmates)
hist(Classmates)
# Define properties of class size distribution
AveClassSize <- 50
SkewClassSize <- 3
Students <- 45000
Seats <- Students*5
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(Seats/AveClassSize, alpha, 1/theta))
ClassSize <- ClassSize[ClassSize > 0]
summary(ClassSize)
hist(ClassSize)
quantile(ClassSize, 0.99)
# This university has some mega classes (the largest has 854 students). The
# average class size is a respectable 53. And it can claim that 99% of classes
# have fewer than 353 students. Now let's figure out how many classmates each
# student has.
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
summary(Classmates)
set.seed(1) # This here just ensures the random samples are the same.
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
# Define properties of class size distribution
AveClassSize <- 19
SkewClassSize <- 1.08
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(1450, alpha, 1/theta))
summary(ClassSize)
hist(ClassSize)
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
# Now let's look at the distribution of classmates
summary(Classmates)
hist(Classmates)
# Define properties of class size distribution
AveClassSize <- 50
SkewClassSize <- 3
Students <- 45000
Seats <- Students*5
# Define gamma distribution parameters.
alpha <- 4/SkewClassSize^2
theta <- AveClassSize/alpha
# Now let's create our university and take a look at its properties
ClassSize <- round(rgamma(Seats/AveClassSize, alpha, 1/theta))
ClassSize <- ClassSize[ClassSize > 0]
summary(ClassSize)
hist(ClassSize)
# This university has some mega classes (the largest has 854 students). The
# average class size is a respectable 53. And it can claim that 99% of classes
# have fewer than 353 students. Now let's figure out how many classmates each
# student has.
Classmates <- c()
for (i in 1:length(ClassSize)){
Classmates <- c(Classmates,rep(ClassSize[i], ClassSize[i]))
}
summary(Classmates)
hist(Classmates)
# Here is a visual exmple of this phenomenon.
if (!"ggplot2" %in% installed.packages()){
install.package('ggplot2')
}
library(ggplot2)
# Example data
# Let's create a sample matrix
ClassEx <- c(2,45,2,4,4,7,5,28,3)
ClassEx <- ClassEx[order(ClassEx)]
# Convert matrix to dataframe
data_df <- as.data.frame(as.table(matrix(ClassEx, nrow = 3)))
heatmap_plot <- ggplot(data_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") + # Create heatmap
scale_fill_gradient(low = "white", high = "steelblue") + # Set color gradient
theme_minimal() + # Set theme
labs(x = "", y = "", title = "Classes") + # Labels
geom_text(aes(label = Freq), color = "black", size = 10)
print(heatmap_plot)
# Create student sampling view
MatesEx <- c()
for (i in 1:length(ClassEx)){
MatesEx <- c(MatesEx, rep(ClassEx[i], ClassEx[i]))
}
# Reorder from smallest to largest
MatesEx <- MatesEx[order(MatesEx)]
# Convert to data frame for plotting
data_df <- as.data.frame(as.table(matrix(MatesEx,nrow = 10)))
# Make plot
heatmap_plot <- ggplot(data_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") + # Create heatmap
scale_fill_gradient(low = "white", high = "steelblue") + # Set color gradient
theme_minimal() + # Set theme
labs(x = "", y = "", title = "Classmates") + # Labels
geom_text(aes(label = Freq), color = "black", size = 10)
print(heatmap_plot)
if (!"spatstat" %in% installed.packages()){
install.package('spatstat')
}
library(spatstat)
GridMax <- 8
# Define the study area (window)
win <- owin(GridMax*c(0, 1), GridMax*c(0, 1))
# Define a non-homogeneous intensity function (e.g., a quadratic function)
lambda <- function(x, y) {
return( 0.5 * x^3 + 1.5 * y^3 )
}
# Generate a point pattern using the intensity function
PointPattern <- rpoispp(lambda, win = win)
# Plot the generated point pattern
plot(PointPattern, xlab = 'Longitude', ylab = 'Latitude',
main = 'Spatial Distribution of Trees', cex = 0.5, pch = 19)
abline(v = c(1,GridMax-1), lty = 2, col = 'black')
abline(h = c(1,GridMax-1), lty = 2, col = 'black')
IsInRegion <- PointPattern$x >= 1 & PointPattern$x <= GridMax-1 &
PointPattern$y >= 1 & PointPattern$y <= GridMax-1
RegionTrees <- PointPattern[IsInRegion]
set.seed(1)
samples <- 100
TreeSample <- sample(1:RegionTrees$n, samples, replace = T)
FocalTrees <- RegionTrees[TreeSample]
points(FocalTrees$x, FocalTrees$y, col = 'red', pch = 19)
Neighbors <- rep(NA, FocalTrees$n)
l2norm <- function(x1,y1,x2,y2){
d <- sqrt((x1-x2)^2 + (y1-y2)^2)
return(d)
}
for (i in 1:FocalTrees$n){
distance <- l2norm(FocalTrees$x[i],FocalTrees$y[i],
PointPattern$x,PointPattern$y)
Neighbors[i] = sum(distance < 1)
}
# Now let's randomly select places within the same sample area
set.seed(1)
SampleX <- runif(100)*(GridMax - 2) + 1
SampleY <- runif(100)*(GridMax - 2) + 1
points(SampleX,SampleY, pch = 19, col = 'blue', cex = 1)
Density <- rep(NA, length(SampleX))
for (i in 1:length(SampleX)){
distance <- l2norm(SampleX[i], SampleY[i],
PointPattern$x,PointPattern$y)
Density[i] = sum(distance < 1)
}
hist(Density, col = 'blue', main = 'Sample of Tree Density')
lskjhf alskdjhas lkd jfhas ;lf jasd ;lfkjasd; f
rm(list = ls())
Density
Density <- 5
MyFavNum <- 1:100
MyFavNum
rm(list = ls())
set.seed(1) # This here just ensures the random samples are the same.
source("~/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/2025 - Spring/BIO 380/Week 1 - Introduction to Statistics/SamplingExample.R", echo=TRUE)
rm(list = ls())
# Goal: Make a data frame with all needed combinations of parameters to study
# the biological cases of interest for the matrix mortality project.
#
# What are the cases?
# a. We want to consider the effect of dispersal magnitude.
# b. We want to consider the effect of dispersal asymmetry between species.
# c. We want to consider the effect of environmental heterogeneity in space.
# d. We want to consider the effect of competitive relationships between species.
#
# Parameters we modify for each case
# a. Average emigration rates, mean(eA, eB).
# b. |eA - eB|
# c.
e.bar.n <- 3
delta.e.n <- 3
comp.outcome.n <-2
e.bar.vec <- seq(from = 0, to = 2, length = e.bar.n)
delta.e.vec <- seq(from = 0, to = 1, length = delta.e.n)
gamma.vec <- seq(from = 0, to = 2, length = comp.outcome.n)
e.bar.mat <- rep(e.bar.vec, times = delta.e.n)
delta.e.mat <- rep(delta.e.vec, each = e.bar.n)
# Let's make the combinations of gamma values for each species that we want.
# This makes a grid of values between
gamma12.mat <- rep(gamma.vec, times = comp.outcome.n)
gamma21.mat <- rep(gamma.vec, each = comp.outcome.n)
# Now let's make the e.bar vector longer to inlcude the gamma values
e.bar <- rep(e.bar.mat, times = length(gamma12.mat))
delta.e <- rep(delta.e.mat, times = length(gamma12.mat))
gamma12 <- rep(gamma12.mat, each = length(e.bar.mat))
gamma21 <- rep(gamma21.mat, each = length(e.bar.mat))
Case <- 1:length(e.bar)
Par.Sim.df <- data.frame(Case)
Par.Sim.df$e.bar <- e.bar; Par.Sim.df$delta.e <- delta.e
Par.Sim.df$gamma.12 <- gamma12; Par.Sim.df$gamma.21 <- gamma21
Par.Sim.df
duplicate(subset(Par.Sim.df, select = c('e.bar', 'delta.e', 'gamma.12', 'gamma.21')))
duplicated(subset(Par.Sim.df, select = c('e.bar', 'delta.e', 'gamma.12', 'gamma.21')))
sum(duplicated(subset(Par.Sim.df, select = c('e.bar', 'delta.e', 'gamma.12', 'gamma.21'))))
# Are any of the rows duplicated?
sum(duplicated(subset(Par.Sim.df, select = c('e.bar', 'delta.e', 'gamma.12', 'gamma.21'))))
knitr::opts_chunk$set(echo = TRUE)
# First, remove all objects stored locally
rm(list = ls())
library(MASS)
library(plot.matrix)
# Set the working directory and input the data
## Load data
setwd('/Users/nicholaskortessis/Downloads')
load('GJAM_output_siteasrandom.Rdata')
abundances = out$inputs$y
siteconditions = out$inputs$xdata
NumObs = dim(abundances)[1]
NumSpecies = dim(abundances)[2]
Xmatrix = t(out$inputs$xStand)
B = out$parameters$betaMu
# We make a modified effect matrix that includes random effects. The idea here is that the random effect term is an overall mean intercept across sites and each site-specific random effect term is the deviation of each site from the mean intercept.
RandFactor = out$parameters$randByGroupMu # Deviations from the mean intercept.
Brand = rbind(B, t(RandFactor)) # New effect matrix including fixed and random effects
# We also need to write a new design matrix that includes information that details the site.
# First, identify all the groups. There are 20 sites
Groups = unique(out$parameters$groupIndex)
# Now, look at the
SiteID = out$inputs$xdata[,'SITEID']
# Make an empty matrix with the following dimensions (# sites x # obs)
RanDesMat = matrix(0, nrow = length(Groups), ncol = NumObs)
row.names(RanDesMat) = row.names(t(RandFactor))
for (i in 1:length(levels(SiteID))){
indx = SiteID == levels(SiteID)[i]
RanDesMat[i,indx] = 1
}
# Generate the new Xmatrix
XmatrixRand = rbind(Xmatrix, RanDesMat)
colSums(XmatrixRand)
XmatrixRand
colSums(XmatrixRand[!(1:4),]
)
XmatrixRand[!(1:4),]
XmatrixRand[(5:dim(XmatrixRand[2])),]
XmatrixRand[(5:dim(XmatrixRand)[2]),]
dim(XmatrixRand)[2]
XmatrixRand[5:81,]
XmatrixRand[c(5:81),]
dim(XmatrixRnad)
dim(XmatrixRand)
XmatrixRand[c(5:24),]
colSums(XmatrixRand[c(5:24),])
head(Xmatrix)
W = t(Brand)%*%XmatrixRand
head(W)
effort = out$inputs$effMat[,1]
# A partition for all sites. It needs to be large enough to hold a partitioning scheme for the site with the most counts. So we define the max number as
maxinds = max(out$inputs$y)
P = matrix(data = NA, nrow = length(effort), ncol = maxinds+1)
for (i in 1:length(effort)){
maxinds_at_site = max(out$inputs$y[i,])
P[i,1:(maxinds_at_site)] = (seq(1:maxinds_at_site) - 1/2)/effort[i]
P[i,maxinds_at_site+1] = 9999
}
P
row.names(Xmatrix)
row.names(XmatrixRand)
length(5:24)
effort
out$inputs$effMat
?plot
?aggregate
library(knitr)
# Set so that long lines in R will be wrapped:
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
opts_knit$set(root.dir = '/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/24-25/2025 - Spring/BIO 380/Lab/Wk3')
# this is my working directory - set yours according to the correct path on your computer
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/24-25/2025 - Spring/BIO 380/Lab/Wk3")
NORS.df <- read.csv(file = 'NORS_20250128.csv')
# this is my working directory - set yours according to the correct path on your computer
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/24-25/2025 - Spring/BIO 380/Lab/Wk3")
setwd("/Users/nicholaskortessis/Library/CloudStorage/GoogleDrive-kortessn@wfu.edu/My Drive/Import/Wake Forest/Teaching/24-25/2025 - Spring/BIO 380/Lab/Wk3")
NORS.df <- read.csv(file = 'NORS_20250128.csv')
